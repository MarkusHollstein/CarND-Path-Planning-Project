Writeup to the Highway Driving project

My solution for this project consists of two major files being "main.cpp" and "helper.cpp", where I defined many helper functions and moved the given ones in order to make main.cpp shorter and better understandable.
After all data is collected and assigned  to variables, I start  by creating points for a spline which is used to model the trajectory (starting from line 101 in main.cpp). The next points are to be saved in the vectors "next_x_vals" and "next_y_vals". 
The first two points for the spline are chosen as the last two points of the previous path if possible and else the car's current position and one step before (line 111 -136). These are necessary to ensure a smooth transition from the old path to the newly created spline. Besides I calculate the speed at the end of the previous path, which will be used later. 
In the next step (line 137-173), depending on wheter the car is about to shift lanes or not more points for the spline are added. In the case of staying in the same lane these are just points 30m,60m and 90m ahead in the same lane. For lane shifting points in the goal lane are used (helper.cpp line 188-208).
In order to be able to create a spline it is necessary to transform the above generated points to local coordinates with origin at the point, where the car is at the end of the previous path and x-axis being its heading direction (line 175-185). (In global coordinates it can happen, that the points don't define a function - for example two x_values can be equal (driving in y-direction))
Now the spline, defining the future trajectory, can be created (line 189,190).
In the next step sensor data is used to determine the best action. The most important information (lane, s-value, speed) of the other cars is saved in a vector( line 201). This is used to find out wheter there is another car in the same lane close ahead and how fast it is driving (line 202,203). If there is traffic ahead some helper functions are used to determine which lane is best (free, faster).
Then the car checks wheter it is possible to shift to the best lane using helper functions (line 278-326 in helper.cpp). If so a laneshift is initialized. If it is not possible it tries to shift to the second best lane. If both are impossible the car adjusts its speed to the car driving ahead to prevent crashing into it (line 223).
Afterwards I start creating the next points for the car to visit. The points from the old path, that have not been visited yet were added to the new path in lines 186 and 187. Starting from line 227 I fill up the vectors, so that they contain 100 points. Here I am using the method explained in the Q&A video of setting a target x-value and calculating how much of the distance is covered in 0.02 seconds (the time between two points). Besides the current speed is adjusted if necessary (line 243). 
After retransforming the newly generated points to global coordinates, they are added to the vector conatining the next points to visit.

Even though the code seems to work alright there are some things that might be improved. The first thing is the fact that in the helper functions where I check which lanes are good, wheter a laneshift is possible etc. I am using many hard coded values which may cause problems (possibly a solution using weight functions as in the lesson would do a better job). Besides it is at the moment not possible to plan to shift two lanes. For example when the car is in lane 1 and lane 3 is completly free it would be good to try to shift to lane two in order to get to the free lane. Additionally it might help to consider the speed of the other cars more when trying to change lanes and to adapt ones own speed to maybe get to a better lane in cases when it is now not possible.
